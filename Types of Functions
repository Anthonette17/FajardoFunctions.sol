// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MyToken is ERC20 {
    address public tokenOwner;

    constructor(string memory tokenName, string memory tokenSymbol, uint256 initialAmount) ERC20(tokenName, tokenSymbol) {
        _mint(msg.sender, initialAmount);
        tokenOwner = msg.sender;
    }

    modifier onlyTokenOwner() {
        require(msg.sender == tokenOwner, "Only the owner can call this function");
        _;
    }

    function mint(address recipient, uint256 amount) public onlyTokenOwner {
        _mint(recipient, amount);
    }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(recipient != address(0), "ERC20: transfer to the zero address");
        return super.transfer(recipient, amount);
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(recipient != address(0), "ERC20: transfer to the zero address");
        return super.transferFrom(sender, recipient, amount);
    }
}
